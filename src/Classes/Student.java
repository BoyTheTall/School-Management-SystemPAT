/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Classes;

import GUIs.LogInUI;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author King The Shepherd
 */
public class Student {
private String Name;
private String Surname;
private String StudentCode;//cannot be updated as this is generated by the database autonumber feature
private String [] subjects;
private ResultSet studTable;
private ResultSet Subjects;//Capped first letter to differentiate from the subject array
private Connection SConn;
private Statement stmt;
private String ParentPhoneNumber;
private String Grade;
private int [] StudentBookIDs;

    /**
     *creates a new student object accepting the student's ID as a parameter
     * @param StudentID
     */
    public Student(String StudentID){
    StudentCode = StudentID;
    try {
      
        Connect();
       
        stmt = SConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
        String SQL = "SELECT * FROM tblStudents WHERE StudentID = " + StudentCode;
        ResultSet studRS = stmt.executeQuery(SQL); 
        studRS.next();
            Name = studRS.getString("Name");
            Surname = studRS.getString("Surname");
            ParentPhoneNumber = studRS.getString("ParentPhoneNumber");
            
            
            SQL = "SELECT ClassName FROM tblClasses INNER JOIN tblClassRegistrations " +
            "ON tblClasses.ClassCode = tblClassRegistrations.ClassCode " +
            "WHERE tblClassRegistrations.StudentID = " +  StudentCode;
            studRS = stmt.executeQuery(SQL);
            studRS.next();        
            Grade = studRS.getString("ClassName");
       
       studRS.close();
       stmt.close();
       SConn.close();
       
    } catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
}
    
    /**
     *fetches the parents phone number
     * @return String value of the student's parent phone number
     */
public String getPPhoneNumber(){
    
return ParentPhoneNumber;
}

    /**
     *fetches the class room name the student's class
     * @return class room name 
     */
    public String getGrade(){

    return Grade;
}

    /**
     *fetches the student's name
     * @return student name
     */
public String getName(){
return Name;
}

    /**
     *fetches the student's surname
     * @return student surname
     */
public String getSurname(){
return Surname;
}
//Remember to code the array assign method(getMethod)

    /**
     *fetches a result set containing the subjects the student is registered for
     * @deprecated 
     * @param SCode
     * @return result set subjects
     */
    public ResultSet getSubjects(String SCode){
    try {
        stmt = SConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
        String SQL = "SELECT tblSubjects.SubjectName, tblSubjectRegistrations.SubjectCode\n" +
"FROM tblSubjects, tblSubjectRegistrations\n" +
"WHERE tblSubjects.SubjectCode = tblSubjectRegistrations.SubjectCode\n" +
"AND StudentID = " + SCode;
        Subjects = stmt.executeQuery(SQL);
        
    } catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
    return Subjects;
}

    /**
     *fetches a result set containing the subjects the student is registered for
     * @return result set subjects
     */
    public ResultSet getSubjects(){
//For when an individual student logs on
    try {
        Connect();
        stmt = SConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
        String SQL = "SELECT tblSubjects.SubjectName, tblSubjectRegistrations.SubjectCode\n" +
"FROM tblSubjects, tblSubjectRegistrations\n" +
"WHERE tblSubjects.SubjectCode = tblSubjectRegistrations.SubjectCode\n" +
"AND tblSubjectRegistrations.StudentID = " + StudentCode;
        Subjects = stmt.executeQuery(SQL);
        
    } catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
    return Subjects;
}

public String getSCode(){

    return StudentCode;
}

private void Connect(){
    try {
    //Method is to be called within the class when the constructor or initialiser run
    String driver = "net.ucanaccess.jdbc.UcanaccessDriver";
    Class.forName(driver);
    SConn = DriverManager.getConnection("jdbc:ucanaccess://" + "SchoolDatabase.mdb");
    stmt = SConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
    } catch (ClassNotFoundException | SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
}
public void Search(){
//Supposed nto be String
//Can't Remember what method is for
}

public ResultSet getMarks(int TestNumber){
    try {//Add Code to check that the user input is within that available result range
        Connect();
        Statement markStatement = SConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
        String testNumber = Integer.toString(TestNumber);
        String SQL = "SELECT SubjectName, Score FROM tblMarks WHERE StudentID = " + StudentCode + " AND TestNumber = " + testNumber;
        ResultSet Marks = markStatement.executeQuery(SQL);
        return Marks;
       
    } catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
    return null;//Return statement is within the try catch
}

    /**
     *changes the student's name to the value in the parameter
     * @param nName
     */
public void setName(String nName){

    Name = nName;
}

    /**
     *changes the student's surname specified in the parameter
     * @param nSurname
     */
public void setSurname(String nSurname){

    Surname = nSurname;
}

    /**
     *changes the parent's phone number ton that specified
     * @param newPhoneNumber
     */
    public void setParentPhoneNumber(String newPhoneNumber){

    ParentPhoneNumber = newPhoneNumber;
}

    /**
     *Updates the subjects done by a student who wishes to either replace a subject with a new one or drop a subject completely
     * @param newSubjects (This is an array of the new subject codes that will replace the old subject registrations)
     * @param oldSubjects (This is an array of th old subject codes to help get to the precise subject registration to be replaced)
     */
    public void setSubjects(String [] newSubjects, String [] oldSubjects){
for(int i = 0; i < oldSubjects.length; i++){
    if(oldSubjects.length < newSubjects.length){
    String parString = oldSubjects[oldSubjects.length - 1];
    try {
        Connect();
        String SQL = "SELECT * FROM tblSubjectRegistrations WHERE StudentID = " + this.StudentCode + " AND SubjectCode = \"" + parString +"\"";
        ResultSet rs = stmt.executeQuery(SQL);
        
        rs.next();   
        rs.deleteRow();
        rs.close();
        stmt.close();
        this.SConn.close();
        JOptionPane.showMessageDialog(null, "Uodate Successful");
    } catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
    
    }
    else{
        try {
        Connect();
        String SQL = "SELECT * FROM tblSubjectRegistrations WHERE StudentID = " + this.StudentCode + " AND SubjectCode = \"" + oldSubjects[i] +"\"";
        ResultSet rs = stmt.executeQuery(SQL);
        
        rs.next();
        
        rs.updateString("SubjectCode", newSubjects[i]);
        
        rs.updateRow();
        rs.close();
        stmt.close();
        this.SConn.close();
        JOptionPane.showMessageDialog(null, "Uodate Successful");
    } catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
}}
}

    /**
     *updates the personal information of the students using the values present in the student object in it's state
     */
public void PersornalInfoUpdate(){
    try {
        String SQL =  "SELECT * FROM tblStudents WHERE StudentID = " + StudentCode;
        
        ResultSet updateRS;//Result set for the updating process
        updateRS = stmt.executeQuery(SQL);
        updateRS.next();
        //updating of the information
        updateRS.updateString("Name", Name);
        updateRS.updateString("Surname", Surname);
        updateRS.updateString("ParentPhoneNumber", ParentPhoneNumber);
        
        updateRS.updateRow();
        updateRS.close();//closing the updateRS to commit the changes to the database
        stmt.close();
        
        stmt = SConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);//Opening the statement for use by the class again
        JOptionPane.showMessageDialog(null, "Update successful");//Displaying message to show that the update process was successful
        
       
    } catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
}
public void SubjectsUpdate(){
//for updating of the learner's subjects. method dynamics will figured later
}
@Override
public String toString(){

String toString = StudentCode + "\t" + Name + "\t" + Surname + "\t" + Grade;
return toString;
}

    /**
     *creates a new login account for the student with the desired username and password
     * @param Username
     * @param Password
     */
public void CreateNewLoginAccount(String Username, String Password){
    try {//Adds a new login Account to the database
        Connect();
        stmt = SConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
        String SQL = "SELECT * FROM tblSPasswords;";
        ResultSet studRS = stmt.executeQuery(SQL);
        studRS.moveToInsertRow();
        
        studRS.updateInt("StudentID", Integer.parseInt(StudentCode));
        studRS.updateString("Username", Username);
        studRS.updateString("Password", Password);
        
        studRS.insertRow();
      
        studRS.close();
        stmt.close();
        SConn.close();
        
        JOptionPane.showMessageDialog(null, "Login Account Created Successfully"
            + "\n" + "Usertype: Student (To be selected whenever user is logging in)" + "\n"
            + "Username: " + Username + "\n"
            + "Password: " + Password);
            
    } catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    /**
     *adds the new student in the system accepting the name, surname, phone number and grade as parameters
     * @param Name
     * @param Surname
     * @param ParentPhoneNumber
     * @param Grade
     */
    public static void createNewStudent(String Name, String Surname,String ParentPhoneNumber,String Grade){
    try {
        String SQL = "SELECT * FROM tblStudents";
        String driver = "net.ucanaccess.jdbc.UcanaccessDriver";
        Class.forName(driver);
        try (Connection conn = DriverManager.getConnection("jdbc:ucanaccess://" + "SchoolDatabase.mdb")) {
            Statement stmt;
            stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            
            ResultSet rs = stmt.executeQuery(SQL);
            rs.moveToInsertRow();
            
            rs.updateString("Name", Name);
            rs.updateString("Surname", Surname);
            rs.updateString("ParentPhonNumber", ParentPhoneNumber);
            
            rs.insertRow();
            stmt.close();
            assignGrade(Grade);
            
            JOptionPane.showMessageDialog(null, "Learner Added Successfully. Remeber to create the login account for the student");
        }
    } catch (SQLException | ClassNotFoundException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
}

private static void assignGrade(String Grade){
    
    //The name e.g 10A should be entered
    try {
        String SQL = "SELECT ClassCode FROM tblClasses WHERE ClassName = "+'"' + Grade + '"';
        String driver = "net.ucanaccess.jdbc.UcanaccessDriver";
        Class.forName(driver);
        try (Connection conn = DriverManager.getConnection("jdbc:ucanaccess://" + "SchoolDatabase.mdb")) {
            Statement stmt;
            stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            
            ResultSet rs = stmt.executeQuery(SQL);
            rs.next();
            int classCode= rs.getInt("ClassCode");
            String year = getYear();
            
            int StudentCode;
            SQL = "SELECT * FROM tblStudents";
            rs = stmt.executeQuery(SQL);
            rs.last();
            StudentCode = rs.getInt("StudentID");
            
            SQL = "SELECT * FROM tblClassRegistrations";
            rs = stmt.executeQuery(SQL);
            rs.moveToInsertRow();
            
            rs.updateString("Year", year);
            rs.updateInt("ClassCode", classCode);
            rs.updateInt("StudentID",StudentCode);
            
            rs.insertRow();
            rs.close();
            stmt.close();
            
            printNewLearnerID(StudentCode);
        }
    } catch (SQLException | ClassNotFoundException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }

}

/**
Gets the current date or the date when the method executed
     * @return String Year
*/
public static String getYear(){
    DateFormat df = new SimpleDateFormat("yyyy");
Date today = new Date();
String date = df.format(today);
return date;
}

/**
 *Method prints the automatically generated student code to the new user profile file text file to be read by the other functions that need that information
 *the user type is automatically added to direct the other methods on what to do and which data to access
 * @param int ID
 */
private static void printNewLearnerID(int ID){
 try {
        try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("NewUserProfilePassOverFile.txt")))) {
           
            out.print(ID + "\t");
            out.print("Student" + "\n");
        }
    } catch (IOException ex) {
        Logger.getLogger(LogInUI.class.getName()).log(Level.SEVERE, null, ex);
    }
}
/**
method accepts a subject code array with the subject codes. there is no set size and this means it can expand 
and contract as needed. has no return value. Adds the subjects chosen by the new student. 
* Accepts an array of subject codes which should be added
     * @param subjectCodes
*/
public void setStudentSubjects(String [] subjectCodes){
    
    try {
        Connect();
        stmt = SConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
        String year = getYear();
//For new Students
for(int i = 0; i < subjectCodes.length; i++){
  String SQL = "SELECT * FROM tblSubjectRegistrations";
  ResultSet insertSubjects;
  insertSubjects = stmt.executeQuery(SQL);
  
  insertSubjects.moveToInsertRow();
  
  insertSubjects.updateString("Year", year);
  insertSubjects.updateString("SubjectCode", subjectCodes[i]);
  insertSubjects.updateInt("StudentID", Integer.parseInt(StudentCode));
  //Not complete as we need to add the subject teacher for that particular grade. a new table has been designed for that.update the Teacher Java Class file accordingly
  insertSubjects.updateInt("TeacherCode", UtilityClass.getSubjectTeacherCode(Grade, subjectCodes[i]));
  insertSubjects.insertRow();
  insertSubjects.close();
  stmt.close();
  stmt = SConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
  
}   
    
    } catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }




}
/**
 *This method does the auto assigning of compulsory subjects as set by determined by the syllabus
it creates an array of subject codes that have to be auto assigned and passes it to the set subjects method that accepts 
the array as a parameter.It has no return value.
* Calls the setSubjects Method
*/
public void autoAssign(){
    
    try {
        String SQL = "SELECT GradeCode FROM tblClasses WHERE ClassName = " + '"' + Grade +'"';
        stmt = SConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
        
        ResultSet rs = stmt.executeQuery(SQL);
        rs.next();
        
        int GradeCode = rs.getInt("GradeCode");
        
        SQL = "SELECT SubjectCode FROM tblAutoAssignableSubjects WHERE GradeCode = " + GradeCode;
        rs = stmt.executeQuery(SQL);
        
       rs.next();
       int i = 0;
        String [] subjectCodes = null;
        subjectCodes[i] = rs.getString("SubjectCode");
        
        while(rs.next()){
        i++;
        subjectCodes[i] = rs.getString("SubjectCode");
        }
        setStudentSubjects(subjectCodes);
        
        if(GradeCode<10){
        JOptionPane.showMessageDialog(null, "All Subjects Added Sucessfully. Add the second additional Language Only");
        }
        else{
        JOptionPane.showMessageDialog(null, "Core Subjects Added Sucessfully. (English) (Life Orientation)");
        }
    } catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }

}

    /**
     *returns all the textbooks assigned to the student represented by the the object's state
     */
    public void returnAllTextBooks(){
    try {
        /*returns all the textbooks that were given to the learner(as in their being given back to the school)*/
        String SQL = "UPDATE tblBookLearnerRecords "
                + "SET Returned = true "
                + "WHERE Returned = false "
                + "AND StudentID = ?";
        PreparedStatement bookReturn;
        bookReturn = SConn.prepareStatement(SQL);
        bookReturn.setInt(1, Integer.parseInt(StudentCode));
        bookReturn.executeUpdate();
        bookReturn.close();
       for(int i = 0; i < StudentBookIDs.length; i++){
       stmt = SConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
       SQL = "SELECT * FROM tblTextBookStock WHERE BookID = " + StudentBookIDs[i];
       ResultSet rs;
       rs = stmt.executeQuery(SQL);
       rs.next();
       
       rs.updateBoolean("Returned", true);
       rs.updateRow();
       rs.close();
       stmt.close();
       }   
        JOptionPane.showMessageDialog(null, "All Books have been return successfully");
         
    } 
    catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    /**
     *Gets all the unreturned textbooks in the current year
     * @return String representation of all owed textbooks
     */
    public String gettextBooks(){
    //Gets all unreturned textbooks for this year.
   ResultSet Books;
   String books;
    
    try {
        Connect();
        stmt = SConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

String SQL = "SELECT tblTextbooks.BookName, tblBookLearnerRecords.BookID " +
"FROM tblTextBooks, tblTextBookStock, tblBookLearnerRecords "+
"WHERE tblTextBookStock.BookID = tblBookLearnerRecords.BookID "+
"AND tblTextBooks.BookCode = tblTextBookStock.BookCode " +
"AND StudentID = " + StudentCode + " AND tblBookLearnerRecords.Returned = false "+
"AND tblBookLearnerRecords.Year = " + '"' + getYear() + '"';

Books = stmt.executeQuery(SQL);

Books.next();
findNumberOfMissingBooks();
int i = 0;
StudentBookIDs[i] = Books.getInt("tblBookLearnerRecords.BookID");
books = Books.getString("tblTextbooks.BookName") + "\t" + Books.getInt("tblBookLearnerRecords.BookID") + "\n";

while(Books.next()){
    i++;
    StudentBookIDs [i] = Books.getInt("tblBookLearnerRecords.BookID");
    books = books + Books.getString("tblTextbooks.BookName") + "\t" + Books.getInt("tblBookLearnerRecords.BookID")  + "\n";
}
    } catch (SQLException ex) {
        books = "No unreturned books present";
       Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
    return books;
}
/**
     * @param oldSubjectCode 
     * @param newSubjectCode 
Method updates the subjects done individually.(Per Record). This is done to minimize the doing of unnecessary update processes
* Accepts two parameters, oldSubjectCode is the subject Code registered in the database (of the subject the student is leaving behind),
* newSubjectCode is the subject Code the student is replacing it with. if there is no new subject to be undertaken then the old record is deleted
 */
public void updateSubjectRegistration(String oldSubjectCode, String newSubjectCode){
    try {
        Connect();
        String SQL  = "SELECT * FROM tblSubjectRegistrations WHERE StudentID = " + StudentCode + " AND SubjectCode = \"" + oldSubjectCode + "\";";
        ResultSet updateSubjects;
        updateSubjects = stmt.executeQuery(SQL);
        updateSubjects.next();
        
        updateSubjects.updateString("SubjectCode", newSubjectCode);
        updateSubjects.updateRow();
        updateSubjects.close();
        stmt.close();
        SConn.close();
    } catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }

}
private void findNumberOfMissingBooks(){
    try {
        Connect();
        String SQL = "SELECT COUNT(tblBookLearnerRecords.BookID) AS [NumberOFBooks] "
                + "FROM tblBookLearnerRecords WHERE StudentID = " + StudentCode;
        ResultSet rs = stmt.executeQuery(SQL);
        rs.next();
        int NoOfBooks = rs.getInt("NumberOFBooks");
        StudentBookIDs = new int[NoOfBooks];
    } catch (SQLException ex) {
        Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
    }
}
}
