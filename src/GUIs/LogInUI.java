/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIs;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author King The Shepherd
 */
public class LogInUI extends javax.swing.JFrame {
Statement stmt;
ResultSet rs;
Connection conn;
String ID;
String Username;
String Password;
    /**
     * Creates new form LogInUI
     */
    public LogInUI() {
        initComponents();
        doConnect();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txfUsername = new javax.swing.JTextField();
        pwfPassword = new javax.swing.JPasswordField();
        cmbUserType = new javax.swing.JComboBox<>();
        btnLogin = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txfUserID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Log In");

        jLabel1.setText("Login As:");

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        cmbUserType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Student", "Teacher", "Mark Admin" }));

        btnLogin.setText("LOGIN");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        jLabel4.setText("UserID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pwfPassword))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbUserType, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 132, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txfUsername))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(btnLogin)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)
                        .addGap(25, 25, 25)
                        .addComponent(txfUserID)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbUserType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txfUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pwfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(btnLogin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
       String UserID = txfUserID.getText();
       String usertype = (String) cmbUserType.getSelectedItem();
       String username = txfUsername.getText();
       String pWord = pwfPassword.getText();
       
       if(usertype.equalsIgnoreCase("Student")){
           try {
               String SQL = "SELECT * FROM tblSPasswords WHERE StudentID = " + UserID;
               rs = stmt.executeQuery(SQL);
               rs.next();
               
               ID = Integer.toString(rs.getInt("StudentID"));
               Username = rs.getString("Username");
               Password = rs.getString("Password");
               
              if(Username.equals(username)&& Password.equals(pWord)){
               SQL = "SELECT Name, Surname FROM tblStudents WHERE StudentID = " + UserID;
               rs = stmt.executeQuery(SQL);
               rs.next();
               String name = rs.getString("Name");
               String surname = rs.getString("Surname");
              JOptionPane.showMessageDialog(this, "Welcome " + name + " " + surname);
            //Add native home GUI
               printLogTime();
                writeusertype();
               new StudentMainMenuUI(ID).setVisible(true);
               conn.close();
               stmt.close();
               this.dispose();
              }         
           } catch (SQLException ex) {
               Logger.getLogger(LogInUI.class.getName()).log(Level.SEVERE, null, ex);
           }
    }   
       if(usertype.equalsIgnoreCase("Teacher")){
           try {
               String SQL = "SELECT * FROM tblTPasswords WHERE TeacherID = " + UserID;
               rs = stmt.executeQuery(SQL);
               rs.next();
               
               ID = Integer.toString(rs.getInt("TeacherID"));
               Username = rs.getString("Username");
               Password = rs.getString("Password");
               
              if(Username.equals(username)&& Password.equals(pWord)){
               SQL = "SELECT Name, Surname FROM tblTeachers WHERE TeacherID = " + UserID;
               rs = stmt.executeQuery(SQL);
               rs.next();
               String name = rs.getString("Name");
               String surname = rs.getString("Surname");
              JOptionPane.showMessageDialog(this, "Welcome " + name + " " + surname);
              printLogTime();            //Prints the log in time of the user
              writeusertype();
               //Add native home GUI
              conn.close();
               stmt.close();
               
              new TeacherMainMenuUI().setVisible(true);
              this.dispose();
              }         
           } catch (SQLException ex) {
               Logger.getLogger(LogInUI.class.getName()).log(Level.SEVERE, null, ex);
           }
    }
       
     if(usertype.equalsIgnoreCase("Mark Admin")){
           try {//Fetches the data based on the user ID provided by the user and the user tpe selected by the user
               String SQL = "SELECT * FROM tblMPasswords WHERE AdminID = " + UserID; 
               rs = stmt.executeQuery(SQL);
               rs.next();
               
               ID = Integer.toString(rs.getInt("AdminID"));
               Username = rs.getString("Username");
               Password = rs.getString("Password");
               
              if(Username.equals(username)&& Password.equals(pWord)){
                  //Checks if both the username and password provided are correct. if they are the program provides the correct user interface based on user rights
               SQL = "SELECT Name, Surname FROM tblAdmins WHERE AdminID = " + UserID;
               rs = stmt.executeQuery(SQL);
               rs.next();
               String name = rs.getString("Name");
               String surname = rs.getString("Surname");
               
               printLogTime();//Prints the log in time of the user
                writeusertype();//Writes the user type and user ID to the bridge text file to be used during the session they are logged in to
               JOptionPane.showMessageDialog(this, "Welcome " + name + " " + surname);
              
              conn.close();
               stmt.close();
//Change the native GUI to be different from the teacher usertype
              new AdminMainMenu().setVisible(true);
              this.dispose();
              }         
           } catch (SQLException ex) {
               Logger.getLogger(LogInUI.class.getName()).log(Level.SEVERE, null, ex);
           }
    }
     
    /*if(Username != username || Password != pWord){
    JOptionPane.showMessageDialog(this, "Username or password is incorrect");
    txfUsername.requestFocus();
    pwfPassword.requestFocus();
    
    }*/
    if(username == null || pWord == null || UserID == null){
    JOptionPane.showMessageDialog(this, "Please fill in all fields");
    txfUsername.requestFocus();
    pwfPassword.requestFocus();
    txfUserID.requestFocus();
    }
    }//GEN-LAST:event_btnLoginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogInUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogInUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogInUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogInUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogInUI().setVisible(true);
            }
        });
    }
private void doConnect(){
    try {//Connects to the database and provides a data input output stream
        String driver = "net.ucanaccess.jdbc.UcanaccessDriver";
        Class.forName(driver);
        conn = DriverManager.getConnection("jdbc:ucanaccess://" + "SchoolDatabase.mdb");
         stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
    } catch (ClassNotFoundException | SQLException ex) {
        Logger.getLogger(LogInUI.class.getName()).log(Level.SEVERE, null, ex);
    }

}

private String getDate(){
//gets the date and turns in into a string value to be appended
DateFormat df = new SimpleDateFormat("dd/MM/yyyy/HH:MM:ss");
Date today = new Date();
String date = df.format(today);
return date;
//JOptionPane.showMessageDialog(null, date);
}

private void printLogTime(){
     //does the actual printing to the log text file
    try { 
         String name = rs.getString("Name");
         String surname = rs.getString("Surname");
        try (//Connecting to the text file for an append operation
            PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("LogFile.txt", true)))) {
            out.println();
            out.print(getDate() + "\t");
            out.print(name + "\t");
            out.print(surname + "\t");
            out.print( ID + "\t");
            out.print(Username + "\t");
            out.print((String)cmbUserType.getSelectedItem() + "\n");
        }
    } catch (IOException | SQLException ex) {
        Logger.getLogger(LogInUI.class.getName()).log(Level.SEVERE, null, ex);
    }
}
private void writeusertype(){
    //Writes the data to tha bridge text file whic is used in the session that each user has started. Information Available will not be enough to compromise the system's data
    try {
        try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("PassOverParameterFile.txt")))) {
           
            out.print(ID + "\t");
            out.print((String)cmbUserType.getSelectedItem() + "\n");
        }
    } catch (IOException ex) {
        Logger.getLogger(LogInUI.class.getName()).log(Level.SEVERE, null, ex);
    }

}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JComboBox<String> cmbUserType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField pwfPassword;
    private javax.swing.JTextField txfUserID;
    private javax.swing.JTextField txfUsername;
    // End of variables declaration//GEN-END:variables
}
